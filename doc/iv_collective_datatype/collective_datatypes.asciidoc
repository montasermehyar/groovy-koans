[[collective-datatypes]]

== Collective Groovy datatypes
<<<

=== Working with ranges

Think about how often you’ve written a loop like this
[source,java]
----
for (int i=0; i<upperBound; i++){
// do something with i
}
----

Next, consider how often you’ve written a conditional like this:
[source,java]
----
if (x >= 0 && x <= upperBound) {
// do something with x
}
----
====
Ranges:: are specified using the double-dot range operator `( .. )` between the left and right bounds.
====

This operator has a low precedence, so you often need to enclose the declaration in parentheses. Ranges can also be declared using their respective constructors.

The `..<` range operator specifies a half-exclusive range—that is, the value on the
right isn’t part of the range:

[source,groovy]
----
left..right
(left..right)
(left..<right)
----

Ranges usually have a lower left bound and a higher right bound. When this is
switched it’s called a *_reverse_* range.

[source,groovy]
----
assert (0..10).contains(0)
assert (0..<10).contains(9)

def a = 0..10
assert a instanceof Range
assert a.contains(5)

a = new IntRange(0,10)
assert a.contains(5)

assert (0.0..1.0).contains(1.0)
assert (0.0..1.0).containsWithinBounds(0.5)

def today = new Date()
def yesterday = today - 1
assert (yesterday..today).size() == 2

assert ('a'..'c').contains('b')
----

TIP: You can walk through a range with the each method

==== Ranges are objects

Because every range is an object, you can pass a range around and call its methods.
The most prominent methods are `each` , which executes a specified closure for each
element in the range, and `contains` , which specifies whether or not a value is within
a range.

[source,groovy]
.Ranges are objects
----
def result = ''
(5..9).each { element ->
        result += element
}
assert result == '56789'

assert 5 in 0..10
assert (0..10).isCase(5)

def age = 36
switch(age){
      case 16..20 : insuranceRate = 0.05 ; break
      case 21..50 : insuranceRate = 0.06 ; break
      case 51..65 : insuranceRate = 0.07 ; break
      default: throw new IllegalArgumentException()
}
assert insuranceRate == 0.06

def ages = [20, 36, 42, 56]
def midage = 21..50
assert ages.grep(midage) == [36, 42]
----

=== Working with lists

[source,groovy]
.Specifying lists
----
List myList = [1, 2, 3]
assert myList.size() == 3
assert myList[0]== 1

assert myList instanceof ArrayList
List emptyList = []
assert emptyList.size() == 0
List longList = (0..1000).toList()
assert longList[555] == 555

List explicitList = new ArrayList()
explicitList.addAll(myList)
assert explicitList.size() == 3
explicitList[0] = 10
assert explicitList[0] == 10

explicitList = new LinkedList(myList)
assert explicitList.size() == 3
explicitList[0] = 10
assert explicitList[0] == 10
----

==== Using list operators

lists override `getAt` and `putAt` methods to implement the subscript operator.

[source,groovy]
.Accessing parts of a list with an overloaded subscript operator
----
myList = ['a','b','c','d','e','f']

assert myList[0..2] == ['a','b','c']
assert myList[0,2,4] == ['a','c','e']

myList[0..2] = ['x','y','z']
assert myList == ['x','y','z','d','e','f']

myList[3..5] = []
assert myList == ['x','y','z']
myList[1..1] = [0, 1, 2]
assert myList == ['x', 0, 1, 2, 'z']
----

Subscript assignments with ranges:: don’t need to be of identical size. When the assigned
list of values is smaller than the range or even empty, the list shrinks . When the
assigned list of values is bigger, the list grows

==== Adding and removing items

[source,groovy]
----
def myList = []
myList += 'a'
assert myList == ['a']

myList += ['b','c']
assert myList == ['a','b','c']

def myList = []
myList << 'a' << 'b'
assert myList == ['a','b']

assert myList - ['b'] == ['a']
assert myList * 2 == ['a','b','a','b']
----


==== Control structures

Groovy lists are more than flexible storage places.

They also play a major role in organizing the execution flow of Groovy programs.

[source,groovy]
----
myList = ['a', 'b', 'c']
assert myList.isCase('a')
assert 'b' in myList

def candidate = 'c'
switch(candidate){
    case myList : assert true; break
    default: assert false
}
assert ['x','a','z'].grep(myList) == ['a']

myList = []
if (myList) assert false

// Lists can be iterated with a 'for' loop
def expr = ''
for (i in [1,'*',5]){
    expr += i
}
assert expr == '1*5'
----

==== Using list methods


[source,groovy]
----
assert [1,[2,3]].flatten() == [1,2,3]
assert [1,2,3].intersect([4,3,1])== [3,1]
assert [1,2,3].disjoint([4,5,6])

list =[1,2,3]
popped = list.pop()
assert popped == 3
assert list == [1,2]

assert [1,2].reverse() == [2,1]
assert [3,1,2].sort() == [1,2,3]

def list = [ [1,0], [0,1,2] ]
list = list.sort { a,b -> a[0] <=> b[0] }
assert list == [ [0,1,2], [1,0] ]

list = list.sort { item -> item.size() }
assert list == [ [1,0], [0,1,2] ]

list = ['a','b','c']
list.remove(2)
assert list == ['a','b']
list.remove('b')
assert list == ['a']
list = ['a','b','b','c']
list.removeAll(['b','c'])
assert list == ['a']

def doubled = [1,2,3].collect{ item ->
    item*2
}
assert doubled == [2,4,6]
def odd = [1,2,3].findAll{ item ->
    item % 2 == 1
}
assert odd == [1,3]

def x = [1,1,1]
assert [1] == new HashSet(x).toList()
assert [1] == x.unique()

def x = [1,null,1]
assert [1,1] == x.findAll{it != null}
assert [1,1] == x.grep{it}
----

==== Accessing list content

[source,groovy]
----

// querying
def list = [1, 2, 3]
assert list.first()== 1
assert list.head()== 1
assert list.tail()== [2, 3]

assert list.last()=3
assert list.count(2)=1
assert list.max()=3
assert list.min()=1

def even = list.find { item ->
    item % 2 == 0
}
assert even == 2

assert list.every { item -> item < 5 }
assert list.any { item -> item < 2 }

// iterating

def store = ''
list.each { item ->
    store += item
}

assert store == '123'
store = ''
list.reverseEach { item ->
    store += item
}
assert store == '321'

store = ''
list.eachWithIndex { item, index ->
    store += "$index:$item "
}
assert store == '0:1 1:2 2:3 '

// accumulating
assert list.join('-') == '1-2-3'
result = list.inject(0) { clinks, guests ->
    clinks + guests
}
assert result == 0 + 1 + 2 + 3
assert list.sum() == 6

factorial = list.inject(1) { fac, item ->
    fac * item
}
assert factorial == 1 * 1 * 2 * 3

----

=== Working with maps

[source,groovy]
----
def myMap = [a:1, b:2, c:3]
assert myMap instanceof LinkedHashMap
assert myMap.size() == 3
assert myMap['a'] == 1

def emptyMap = [:]
assert emptyMap.size() == 0
def explicitMap = new TreeMap()
explicitMap.putAll(myMap)
assert explicitMap['a'] == 1

def composed = [x:'y', *:myMap] //Spread operator
assert composed == [x:'y', a:1, b:2, c:3]

assert ['a':1] == [a:1]

def x = 'a'
assert ['x':1] == [x:1]
assert ['a':1] == [(x):1]

----


==== Using map operators

[source,groovy]
----
def myMap = [a:1, b:2, c:3]

// Retrieves existing elements
assert myMap['a'] == 1
assert myMap.a == 1
assert myMap.get('a') == 1
assert myMap.get('a',0) == 1

// Attempts to retrieve missing elements
assert myMap['d'] == null
assert myMap.d == null
assert myMap.get('d') == null

// Default value
assert myMap.get('d',0) == 0
assert myMap.d == 0

//Single putAt
myMap['d'] = 1
assert myMap.d == 1
myMap.d = 2
assert myMap.d == 2

//Equals
def myMap = [a:1, b:2, c:3]
def other = [b:2, c:3, a:1]
assert myMap == other

// JDK Methods
assert !myMap.isEmpty()
assert myMap.size() == 3
assert myMap.containsKey('a')
assert myMap.containsValue(1)
assert myMap.entrySet() instanceof Collection

//GDK methods
assert myMap.any {entry -> entry.value > 2 }
assert myMap.every {entry -> entry.key < 'd'}
assert myMap.keySet() == ['a','b','c'] as Set

//Equals List
assert myMap.values().toList() == [1, 2, 3]
----

Assignments to maps can be done using the subscript operator or via the dot-key syn-
tax. If the key in the dot-key syntax contains special characters, it can be put into
string markers, like so:
[source,groovy]
----
myMap = ['a.b':1]
assert myMap.'a.b' == 1
----
Just writing `myMap.a.b` wouldn’t work here—that would be the equivalent of calling
`myMap.getA().getB()` .


==== Iterating over maps (GDK)

[source,groovy]
----
def myMap = [a:1, b:2, c:3]

//Iterates over entries
def store = ''
myMap.each { entry ->
    store += entry.key
    store += entry.value
}
assert store == 'a1b2c3'

//Iterates over keys and values
def store = ''
myMap.each { key,value ->
    store += key
    store += value
}
assert store == 'a1b2c3'

//Iterates over just keys
store = ''
for (key in myMap.keySet()) {
    store += key
}
assert store == 'abc'

//Iterates over just values
store = ''
for (value in myMap.values()) {
    store += value
}
assert store == '123'

----

==== Changing map content and building new objects from it

[source,groovy]
----
def myMap = [a:1, b:2, c:3]
myMap.clear()
assert myMap.isEmpty()

myMap = [a:1, b:2, c:3]
myMap.remove('a')
assert myMap.size() == 2
assert [a:1] + [b:2] == [a:1, b:2]

myMap = [a:1, b:2, c:3]
def abMap = myMap.subMap(['a', 'b'])
assert abMap.size() == 2

abMap = myMap.findAll { entry -> entry.value < 3 }
assert abMap.size() == 2
assert abMap.a == 1

def found = myMap.find { entry -> entry.value < 2 }
assert found.key == 'a'
assert found.value == 1

def doubled = myMap.collect { entry -> entry.value *= 2 }
assert doubled instanceof List
assert doubled.every  { item -> item % 2 == 0 }

def addTo = []
myMap.collect(addTo) { entry -> entry.value *= 2 }
assert addTo instanceof List
assert addTo.every { item -> item % 2 == 0 }
----


=== Notes on Groovy collections

One of the typical peculiarities of the Java collections is that you shouldn’t try to
structurally change one while iterating through it. A structural change is one that adds
an entry, removes an entry, or changes the sequence of entries when the collection is
sequence-aware. This applies even when iterating through a view onto the collection,
such as using list[range] .

==== Understanding concurrent modification

If you fail to meet this constraint, you’ll see a ConcurrentModificationException .
For example, you cannot remove all elements from a list by iterating through it and
removing the first element at each step:

[source,groovy]
----
def list = [1, 2, 3, 4]
list.each{ list.remove(0) }
// throws ConcurrentModificationException !!
----

In this case, the correct solution is to use the clear method. The Java Collections API
has lots of such specialized methods. When searching for alternatives, consider collect ,
addAll , removeAll , findAll , and grep .

==== Distinguishing between copy and modify semantics

Groovy tries to adapt to Java and follow the heuristics that you can spot when looking through the
Java Collections API :

- Methods that modify the receiver typically don’t return a collection. Examples:
add , addAll , remove , removeAll , and retainAll . Counterexample: sort .
- Methods that return a collection typically don’t modify the receiver. Examples:
grep , findAll , and collect . Counterexample: sort (though we recommend
using toSorted in that case). And yes, sort is a counterexample for both,
because it returns a collection and modifies the receiver.
- Methods that modify the receiver have imperative names. They sound like there
could be an exclamation mark behind them. (Indeed, this is Ruby’s naming
convention for such methods.) Examples: add , addAll , remove , removeAll ,
retainAll , and sort . Counterexamples: collect , grep , and findAll , which
are imperative but don’t modify the receiver and return a modified copy.

The preceding rules can be mapped to operators, by applying them to the names of
their method counterparts: `<< leftShift` is imperative and modifies the receiver (on
lists, unfortunately not on strings—doing so would break Java’s invariant of strings
being immutable); `plus` isn’t imperative and returns a copy.


NOTE: The convention in Groovy is that any method that implements an arithmetic oper-
      ator (`plus, minus, multiply, divide`) doesn’t modify the receiver but returns a copy.

