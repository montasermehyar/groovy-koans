@Immutable class User {
    String username, email
    Date created = new Date()
    Collection roles
}

def first = new User(username: 'mrhaki', email: 'email@host.com', roles: ['admin', 'user'])
assert first.username == 'mrhaki'
assert first.email == 'email@host.com'
assert first.roles == ['admin', 'user']
assert new Date().after(first.created)
try {
    // Properties are readonly.
    first.username = 'new username'
} catch (ReadOnlyPropertyException e) {
    assert e.message == 'Cannot set readonly property: username for class: User'
}
try {
    // Collections are wrapped in immutable wrapper classes, so we cannot
    // change the contents of the collection.
    first.roles << 'new role'
} catch (UnsupportedOperationException e) {
    assert true
}


def date = new Date(109, 8, 16)
def second = new User('user', 'test@host.com', date, ['user'])
assert second.username == 'user'
assert second.email == 'test@host.com'
assert second.roles == ['user']
assert second.created.format('yyyy/MM/dd') == '2009/09/16'
assert date == second.created
assert !date.is(second.created)  // Date, Clonables and arrays are deep copied.
// toString() implementation is created.
assert second.toString() == 'User(user, test@host.com, Wed Sep 16 00:00:00 CEST 2009, [user])'


def third = new User(username: 'user', email: 'test@host.com', created: date, roles: ['user'])
// equals() method is also generated by the annotation
// and is based on the property values.
assert third == second
